// Add -PDeploymentNaming to the build command to strip the jar filenames
// Of the version information (this is just for clean files on GitHub)
//
// Add -Prelease to the build command to version the jars with release versions
// (defaults to dev build labeling)

// possible concern: make sure that the timestamps for the jars are correct
// possible concern: make sure that the yml resources are always updated and correct timestamps
// TODO build the spigot server jars automatically as needed
// TODO create task to setup workspace
// TODO make sure the clean task cleans everything properly
// TODO make sure all builds can be cached where possible
// TODO clean up dependency management

wrapper {
  gradleVersion = "5.2.1"
  setDistributionType(Wrapper.DistributionType.ALL)
}

buildscript {
  repositories {
    jcenter()
    mavenCentral()
    maven {
      url "https://plugins.gradle.org/m2/"
    }
  }
  dependencies {
    classpath "com.github.jengelman.gradle.plugins:shadow:4.0.4"
    classpath "de.undercouch:gradle-download-task:3.4.2"
    classpath "com.sarhanm:gradle-versioner:2.4.0"
  }
}

repositories {
  flatDir {
    dirs "lib"
  }
}

//apply plugin: "java"
//apply plugin: "com.github.johnrengelman.shadow"
//apply plugin: "de.undercouch.download"
//apply plugin: "com.sarhanm.versioner"

final String OPTION_DEPLOYMENT_NAMING = "DeploymentNaming"
final String OPTION_RELEASE = "release"

/*configurations {
    spigot
    mscore.extendsFrom(compile)
    factions.extendsFrom(spigot)
    teams.extendsFrom(spigot)
    memory.extendsFrom(spigot)
    towny.extendsFrom(spigot)
    shop.extendsFrom(spigot)
}*/

ext {
  magicjutsusData = new MSConfig()
}

/*dependencies {
  compile group: "org.apache.commons", name: "commons-math3", version: "3.0"
  spigot ":spigot-1.12"
  mscore ":spigot-1.12"
  mscore ":EffectLib-4.0"
  mscore ":Vault"
  mscore ":ProtocolLib"
  mscore ":NoCheatPlus"
  mscore ":WorldEdit"
  mscore ":WorldGuard"
  mscore ":LibsDisguises-9.0.9"
  mscore ":PlaceholderAPI"
  mscore ":GriefPrevention"
  factions ":MassiveCore"
  factions ":Factions"
  factions configurations.mscore.artifacts.getFiles()
  teams configurations.mscore.artifacts.getFiles()
  memory configurations.mscore.artifacts.getFiles()
  towny configurations.mscore.artifacts.getFiles()
  towny ":Towny"
  shop configurations.mscore.artifacts.getFiles()
  shop ":Vault"
}*/

public class MSConfig {
  String distDir = "dist"
  String libDir = "lib"
  String docDir = "doc"

  // Java versions
  def javaCoreVersion = "1.8"
  def javaTeamsVersion = "1.8"
  def javaMemoryVersion = "1.8"
  def javaShopVersion = "1.8"
  def javaTownyVersion = "1.8"
  def javaFactionsVersion = "1.8"

  //<tstamp><format property="datestamp" pattern="yyMMddHHmm"/></tstamp>
  def datestampPattern = "yyMMddHHmm"
  def datestampString = "${-> new Date().format(datestampPattern)}"

  // Resource retrieving
  def resourceNcpUrl = "https://ci.md-5.net/job/NoCheatPlus/lastSuccessfulBuild/artifact/target/NoCheatPlus.jar"
  //def resourcePlaceholderapiUrl = "http://repo.extendedclip.com/content/repositories/placeholderapi/me/clip/placeholderapi/2.8.2/placeholderapi-2.8.2.jar"
  //def resourceGriefPreventionUrl = "https://github.com/TechFortress/GriefPrevention/releases/download/16.8/GriefPrevention.jar"

  def versionSuffix

  String stringVersionCore
  String stringVersionFactions
  String stringVersionMemory
  String stringVersionTeams
  String stringVersionTowny
  String stringVersionShop
}

MSConfig msconfig = ext.magicjutsusData

static def downloadFile(File file, URL url) {
  if (!file.exists()) {
    url.withInputStream{ i -> file.withOutputStream{ it << i }}
  }
}

// FIXME this should be setup as a task instead of a method running on configuration time
// Ensures resource availability
def magicjutsusGetResources() {
  println "Running the get resources phase"

  File libFolder = project.file(project.ext.magicjutsusData.libDir)

  // Get NoCheatPlus
  downloadFile(new File(libFolder, "NoCheatPlus.jar"), new URL(project.ext.magicjutsusData.resourceNcpUrl))

  // Get PlaceholderAPI
  //downloadFile(new File(libFolder, "PlaceholderAPI.jar"), new URL(project.ext.magicjutsusData.resourcePlaceholderapiUrl))

  // Get GriefPrevention
  //downloadFile(new File(libFolder, "GriefPrevention.jar"), new URL(project.ext.magicjutsusData.resourceGriefPreventionUrl))

  println "Finished running the get resources phase"
}

afterEvaluate {
  magicjutsusGetResources()
}

// FIXME this should not be run at configuration time
//magicjutsusGetResources()
task downloadDependencies() {
    group = "Setup"
    doFirst {
        magicjutsusGetResources()
    }
}

subprojects {
  apply plugin: "java"
  apply plugin: "com.github.johnrengelman.shadow"
  repositories {
    flatDir {
      dirs(rootDir.path + "/lib")
    }
    jcenter()
    mavenCentral()
    maven {
      url "https://hub.spigotmc.org/nexus/content/repositories/snapshots"
    }
    maven {
      url "https://oss.sonatype.org/content/repositories/snapshots"
    }
    maven {
      url "https://repo.codemc.org/repository/maven-public"
    }
    maven {
      url "https://cdn.rawgit.com/Rayzr522/maven-repo/master/"
    }
    maven {
      url "http://maven.sk89q.com/repo/"
    }
    maven {
      url "https://jitpack.io"
    }
  }
  it.version = "4.0-Beta-6"
  
  processResources {
    expand(["version": "4.0-Beta-6"])
  }
  shadowJar {
    configurations = [project.configurations.shadow]
  }
}

// FIXME fix up this task
/*task magicjutsusBuildVersion() {
  description = "Assign version suffix in dev build format"
  msconfig.versionSuffix = "dev-${-> msconfig.datestampString}"
}

// FIXME fix up this task
task magicjutsusReleaseVersion() {
  description = "Assign version suffix in release format"
  if (project.hasProperty("${OPTION_RELEASE}")) msconfig.versionSuffix = "Release"
}

// FIXME do more of this at build time, not config time
task magicjutsusCoreJar(type: com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar) {
  description = "Create the main MagicJutsus jar"
  dependsOn = [
    "magicjutsusCoreCompile",
    "magicjutsusCoreCopyResources"
  ]
  archiveFileName = "MagicJutsus-${msconfig.stringVersionCore}.jar"
  if (project.hasProperty("${OPTION_DEPLOYMENT_NAMING}")) archiveFileName = "MagicJutsus.jar"
  destinationDirectory = project.file(msconfig.distDir)
  from("${msconfig.coreBuildDir}")
  dependencies {
    repositories {
      mavenCentral()
    }
    dependency("org.apache.commons:commons-math3")
  }
  from (project.configurations.compile)
  relocate "org.apache.commons.math3", "com.nisovin.magicjutsus.shaded.org.apache.commons"
  magicjutsusCoreJar.exclude "**${File.separator}*.xml", "**${File.separator}*pom.properties", "**${File.separator}**LocalizedFormats**"
  println magicjutsusCoreJar.excludes
}

apply plugin: "maven-publish"

group = "com.github.TheComputerGeek2"

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId = "com.github.TheComputerGeek2"
            afterEvaluate {
              version = "MagicJutsus-${msconfig.coreVersion}-${gitdata.getCommit()}"
            }
            artifact magicjutsusCoreJar
        }
    }
}

artifacts {
  mscore magicjutsusCoreJar
  teams magicjutsusTeamsJar
  memory magicjutsusMemoryJar
  shop magicjutsusShopJar
  towny magicjutsusTownyJar
  factions magicjutsusFactionsJar
  archives magicjutsusZip
}
*/
