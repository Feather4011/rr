package com.nisovin.magicjutsus.jutsus.buff;

import java.util.Set;
import java.util.List;
import java.util.UUID;
import java.util.HashSet;

import org.bukkit.entity.Entity;
import org.bukkit.event.EventHandler;
import org.bukkit.entity.LivingEntity;
import org.bukkit.event.entity.EntityDamageEvent;
import org.bukkit.event.entity.EntityDamageEvent.DamageCause;

import com.nisovin.magicjutsus.jutsus.BuffJutsu;
import com.nisovin.magicjutsus.util.MagicConfig;

public class InvulnerabilityJutsu extends BuffJutsu {

	private Set<UUID> gods;
	private Set<DamageCause> damageCauses;

	public InvulnerabilityJutsu(MagicConfig config, String jutsuName) {
		super(config, jutsuName);
		
		damageCauses = new HashSet<>();
		List<String> causes = getConfigStringList("damage-causes", null);
		if (causes != null) {
			for (String s : causes) {
				s = s.replace(" ","_").replace("-","_").toUpperCase();
				DamageCause cause = DamageCause.valueOf(s);
				if (cause == null) continue;
				damageCauses.add(cause);
			}
		}
		
		gods = new HashSet<>();
	}

	@Override
	public boolean castBuff(LivingEntity entity, float power, String[] args) {
		gods.add(entity.getUniqueId());
		return true;
	}

	@Override
	public boolean isActive(LivingEntity entity) {
		return gods.contains(entity.getUniqueId());
	}

	@Override
	public void turnOffBuff(LivingEntity entity) {
		gods.remove(entity.getUniqueId());
	}

	@Override
	protected void turnOff() {
		gods.clear();
	}

	@EventHandler(ignoreCancelled = true)
	public void onEntityDamage(EntityDamageEvent event) {
		Entity entity = event.getEntity();
		if (!(entity instanceof LivingEntity)) return;
		if (!damageCauses.isEmpty() && !damageCauses.contains(event.getCause())) return;

		LivingEntity livingEntity = (LivingEntity) entity;
		if (!isActive(livingEntity)) return;
		if (isExpired(livingEntity)) {
			turnOff(livingEntity);
			return;
		}

		event.setCancelled(true);
		if (livingEntity.getNoDamageTicks() < livingEntity.getMaximumNoDamageTicks() / 2.0F) {
			addUseAndChargeCost(livingEntity);
		}

	}

}
